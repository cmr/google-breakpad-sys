/* automatically generated by rust-bindgen */

pub type BreakpadRef = *mut ::libc::c_void;
pub type BreakpadFilterCallback = ::std::option::Option<extern "C" fn(exception_type: ::libc::c_int, exception_code: ::libc::c_int, crashing_thread: mach_port_t, context: *mut ::libc::c_void) -> u8>;

extern "C" {
    pub fn BreakpadCreate(parameters: *mut ::libc::c_void) -> BreakpadRef;
    pub fn BreakpadRelease(_ref: BreakpadRef);
    pub fn BreakpadSetKeyValue(_ref: BreakpadRef, key: *mut ::libc::c_void, value: *mut ::libc::c_void);
    pub fn BreakpadKeyValue(_ref: BreakpadRef, key: *mut ::libc::c_void);
    pub fn BreakpadRemoveKeyValue(_ref: BreakpadRef, key: *mut ::libc::c_void);
    pub fn BreakpadAddUploadParameter(_ref: BreakpadRef, key: *mut ::libc::c_void, value: *mut ::libc::c_void);
    pub fn BreakpadRemoveUploadParameter(_ref: BreakpadRef, key: *mut ::libc::c_void);
    pub fn BreakpadGetCrashReportCount(_ref: BreakpadRef) -> ::libc::c_int;
    pub fn BreakpadGetNextReportConfiguration(_ref: BreakpadRef);
    pub fn BreakpadUploadNextReport(_ref: BreakpadRef);
    pub fn BreakpadUploadNextReportWithParameters(_ref: BreakpadRef, server_parameters: *mut ::libc::c_void);
    pub fn BreakpadUploadReportWithParametersAndConfiguration(_ref: BreakpadRef, server_parameters: *mut ::libc::c_void, configuration: *mut ::libc::c_void);
    pub fn BreakpadHandleNetworkResponse(_ref: BreakpadRef, configuration: *mut ::libc::c_void, data: *mut ::libc::c_void, error: *mut ::libc::c_void);
    pub fn BreakpadUploadData(_ref: BreakpadRef, data: *mut ::libc::c_void, name: *mut ::libc::c_void, server_parameters: *mut ::libc::c_void);
    pub fn BreakpadGenerateReport(_ref: BreakpadRef, server_parameters: *mut ::libc::c_void);
}
