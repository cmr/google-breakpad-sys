/* automatically generated by rust-bindgen */

pub type Enum_breakpad_eh_handler_type = ::libc::c_uint;
pub const HANDLER_NONE: ::libc::c_uint = 0;
pub const HANDLER_EXCEPTION: ::libc::c_uint = 1;
pub const HANDLER_INVALID_PARAMETER: ::libc::c_uint = 2;
pub const HANDLER_PURECALL: ::libc::c_uint = 4;
pub const HANDLER_ALL: ::libc::c_uint = 7;
pub enum Struct_breakpad_eh { }
pub type breakpad_eh = Struct_breakpad_eh;
pub enum Struct_breakpad_crash_generation_client { }
pub type breakpad_crash_generation_client =
    Struct_breakpad_crash_generation_client;
pub enum Struct_breakpad_crash_generation_server { }
pub type breakpad_crash_generation_server =
    Struct_breakpad_crash_generation_server;
pub enum Struct_breakpad_custom_client_info { }
pub type breakpad_custom_client_info = Struct_breakpad_custom_client_info;
pub enum Struct_breakpad_client_info { }
pub type breakpad_client_info = Struct_breakpad_client_info;
pub enum Struct_breakpad_md_raw_assertion_info { }
pub type breakpad_md_raw_assertion_info =
    Struct_breakpad_md_raw_assertion_info;
pub type breakpad_filter_cb =
    ::std::option::Option<extern "C" fn(context: *mut ::libc::c_void,
                                        exinfo: *mut EXCEPTION_POINTERS,
                                        assertion:
                                            *mut breakpad_md_raw_assertion_info)
                              -> u8>;
pub type breakpad_minidump_cb =
    ::std::option::Option<extern "C" fn(dump_path: *const wchar_t,
                                        minidump_id: *const wchar_t,
                                        context: *mut ::libc::c_void,
                                        exinfo: *mut EXCEPTION_POINTERS,
                                        assertion:
                                            *mut breakpad_md_raw_assertion_info,
                                        succeeded: u8) -> u8>;
pub type breakpad_on_client_connected_cb =
    ::std::option::Option<extern "C" fn(context: *mut ::libc::c_void,
                                        client_info:
                                            *const breakpad_client_info)
                              -> ()>;
pub type breakpad_on_client_dump_request_cb =
    ::std::option::Option<extern "C" fn(context: *mut ::libc::c_void,
                                        client_info:
                                            *const breakpad_client_info,
                                        file_path: *const wchar_t) -> ()>;
pub type breakpad_on_client_exited_cb =
    ::std::option::Option<extern "C" fn(context: *mut ::libc::c_void,
                                        client_info:
                                            *const breakpad_client_info)
                              -> ()>;
pub type breakpad_on_client_upload_request_cb =
    ::std::option::Option<extern "C" fn(context: *mut ::libc::c_void,
                                        crash_id: DWORD) -> ()>;
extern "C" {
    pub fn breakpad_eh_create_in_process(dump_path: *const wchar_t,
                                         filter: breakpad_filter_cb,
                                         callback: breakpad_minidump_cb,
                                         callback_context:
                                             *mut ::libc::c_void,
                                         handler_types: ::libc::c_int)
     -> *mut breakpad_eh;
    pub fn breakpad_eh_create_try_out_of_process(dump_path: *const wchar_t,
                                                 filter: breakpad_filter_cb,
                                                 callback:
                                                     breakpad_minidump_cb,
                                                 callback_context:
                                                     *mut ::libc::c_void,
                                                 handler_types: ::libc::c_int,
                                                 dump_type: MINIDUMP_TYPE,
                                                 pipe_handle: HANDLE,
                                                 custom_info:
                                                     *const breakpad_custom_client_info)
     -> *mut breakpad_eh;
    pub fn breakpad_eh_create_out_of_process(dump_path: *const wchar_t,
                                             filter: breakpad_filter_cb,
                                             callback: breakpad_minidump_cb,
                                             callback_context:
                                                 *mut ::libc::c_void,
                                             handler_types: ::libc::c_int,
                                             client:
                                                 *mut breakpad_crash_generation_client)
     -> *mut breakpad_eh;
    pub fn breakpad_eh_destroy(eh: *mut breakpad_eh) -> ();
    pub fn breakpad_eh_get_dump_path(eh: *const breakpad_eh)
     -> *const wchar_t;
    pub fn breakpad_eh_set_dump_path(eh: *mut breakpad_eh,
                                     dumppath: *const wchar_t) -> ();
    pub fn breakpad_eh_request_upload(eh: *mut breakpad_eh, crash_id: DWORD)
     -> u8;
    pub fn breakpad_eh_write_minidump_for_exception(eh: *mut breakpad_eh,
                                                    exinfo:
                                                        *mut EXCEPTION_POINTERS)
     -> u8;
    pub fn breakpad_eh_get_requesting_thread_id(eh: *const breakpad_eh)
     -> DWORD;
    pub fn breakpad_eh_get_handle_debug_exceptions(eh: *const breakpad_eh)
     -> u8;
    pub fn breakpad_eh_set_handle_debug_exceptions(eh: *mut breakpad_eh,
                                                   handle_debug_exceptions:
                                                       u8) -> ();
    pub fn breakpad_eh_get_consume_invalid_handle_exceptions(eh:
                                                                 *const breakpad_eh)
     -> u8;
    pub fn breakpad_eh_set_consume_invalid_handle_exceptions(eh:
                                                                 *mut breakpad_eh,
                                                             consume_invalid_handle_exceptions:
                                                                 u8) -> ();
    pub fn breakpad_eh_is_out_of_process(eh: *const breakpad_eh) -> u8;
    pub fn breakpad_eh_register_app_memory(eh: *mut breakpad_eh,
                                           ptr: *mut ::libc::c_void,
                                           len: size_t) -> ();
    pub fn breakpad_eh_unregister_app_memory(eh: *mut breakpad_eh,
                                             ptr: *mut ::libc::c_void) -> ();
    pub fn breakpad_crash_generation_client_create(pipe_handle: HANDLE,
                                                   dump_type: MINIDUMP_TYPE,
                                                   custom_info:
                                                       *const breakpad_custom_client_info)
     -> *mut breakpad_crash_generation_client;
    pub fn breakpad_crash_generation_client_register(client:
                                                         *mut breakpad_crash_generation_client)
     -> u8;
    pub fn breakpad_crash_generation_client_request_upload(client:
                                                               *mut breakpad_crash_generation_client,
                                                           crash_id: DWORD)
     -> u8;
    pub fn breakpad_crash_generation_client_request_dump(client:
                                                             *mut breakpad_crash_generation_client,
                                                         ex_info:
                                                             *mut EXCEPTION_POINTERS,
                                                         assert_info:
                                                             *mut breakpad_md_raw_assertion_info)
     -> u8;
    pub fn breakpad_crash_generation_server_create(pipe_name: *const wchar_t,
                                                   pipe_sec_attrs:
                                                       *mut SECURITY_ATTRIBUTES,
                                                   connect_cb:
                                                       breakpad_on_client_connected_cb,
                                                   connect_context:
                                                       *mut ::libc::c_void,
                                                   dump_callback:
                                                       breakpad_on_client_dump_request_cb,
                                                   dump_context:
                                                       *mut ::libc::c_void,
                                                   exit_callback:
                                                       breakpad_on_client_exited_cb,
                                                   exit_context:
                                                       *mut ::libc::c_void,
                                                   upload_request_callback:
                                                       breakpad_on_client_upload_request_cb,
                                                   upload_context:
                                                       *mut ::libc::c_void,
                                                   generate_dumps: u8,
                                                   dump_path: *const wchar_t)
     -> *mut breakpad_crash_generation_server;
    pub fn breakpad_crash_generation_server_start(server:
                                                      *mut breakpad_crash_generation_server)
     -> u8;
    pub fn breakpad_crash_generation_server_pre_fetch_custom_info(server:
                                                                      *mut breakpad_crash_generation_server,
                                                                  do_pre_fetch:
                                                                      u8)
     -> ();
}
